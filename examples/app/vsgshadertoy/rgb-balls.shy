void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Correct aspect ratio
    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;
    
    // Background gradient
    vec3 col = mix(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.4), uv.y * 0.5 + 0.5);
    
    // Light source direction
    vec3 lightDir = normalize(vec3(-10.0, -10.0, 20.0));
    
    // Sphere properties
    float sphereRadius = 0.20;
    vec3 sphereColors[3] = vec3[](vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0));
    
    // Time factor for rotation
    float time = iTime * 0.5;
    
    // Draw each sphere
    for(int i = 0; i < 3; i++) {
        float angle = time + float(i) * 2.0944; // 120 degrees apart
        vec2 position = vec2(sin(angle), cos(angle)) * sphereRadius * 2;
        
        // Sphere shading
        float dist = length(uv - position);
        if(dist < sphereRadius) {
            float diff = dot(lightDir, normalize(vec3(position - uv, sqrt(sphereRadius * sphereRadius - dist * dist))));
            diff = clamp(diff, 0.0, 1.0);
            
            // Combine sphere color with light intensity and background
            col = mix(col, sphereColors[i] * diff, smoothstep(sphereRadius, sphereRadius - 0.03, dist));
        }
    }
    
    // Output to screen
    fragColor = vec4(col,1.0);
}